# Simple CMA API Test Commands

## 1. Test Gemini AI Text Generation

### Generate Property Description

```bash
curl -X POST http://localhost:3001/api/generate-text \
  -H "Content-Type: application/json" \
  -d '{"prompt": "Write a compelling real estate description for a 3-bedroom, 2-bathroom ranch home in Omaha, Nebraska. 1,800 sq ft, built in 2005, 2-car garage, finished basement. Keep it under 200 words."}'
```

### Generate Listing Strategy

```bash
curl -X POST http://localhost:3001/api/generate-text \
  -H "Content-Type: application/json" \
  -d '{"prompt": "As a real estate agent in Omaha, provide a listing strategy for a $350,000 home in average condition. Market shows 15 days average DOM. Suggest pricing and marketing approach in 2-3 sentences."}'
```

## 2. Test MLS Comparable Properties Search

### Search for Omaha Comps

```bash
curl "http://localhost:3001/api/comps?city=Omaha&sqft_min=1500&sqft_max=2000"
```

### Search for Lincoln Comps

```bash
curl "http://localhost:3001/api/comps?city=Lincoln&sqft_min=1800&sqft_max=2200"
```

## 3. Health Check (Basic)

```bash
curl http://localhost:3001/
```

## 4. Property Search by Address (optional)

```bash
curl "http://localhost:3001/api/property-search?address=123%20Main%20St&city=Anytown"
```

## Notes

- Server base URL (local): http://localhost:3001
- The Gemini API calls require a working Gemini API key on the server side (set `GEMINI_API_KEY` in your environment or in Elastic Beanstalk). The server proxies the request to Gemini.
- The MLS (Paragon) API calls require valid Paragon credentials or server token. Configure `PARAGON_SERVER_TOKEN` and related settings on the server environment before attempting remote queries.
- These curl examples are written for bash/macOS. If you're on Windows PowerShell adjust quoting accordingly.

## Quick start (if you need it)

From the project root:

```bash
npm install
node server.js   # or `npm run start` if defined in package.json
```

After the server is running, re-run the curl commands above.

---

Keep this file as a quick reference; tell me if you want these bundled into a small shell script (e.g., `scripts/run-tests.sh`) that prompts for host/port and runs the checks automatically.
